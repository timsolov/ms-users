syntax="proto3";

package users.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = ".;pb";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "X-User-Id";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-User-Id";
        description: "Authentication token, prefixed by Bearer word: Bearer <token>";
      }
    }
  }
  // security: {
  //   security_requirement: {
  //     key: "X-User-Id"
  //   }
  // }
};

service UserService {
  // Creates new user.
  //
  // For creating new user you have to provide:
  // - email;
  // - password;
  // ```json
  // {
  //   "name": "value"
  // }
  // ```
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   security: {
    //       security_requirement: {
    //           key: "X-User-Id";
    //       }
    //   }
    // };
  }

  // List users.
  //
  // Returns the list of users records.
  // Maximum records per request is 100.
  // Pagination available by using offset, limit.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }

  // Update user info.
  //
  // Update user info fully or partial.
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/api/v1/users"
      body: "*"
    };
  }

  // UserDetail detail info.
  //
  // UserDetail returns user detail info.
  rpc UserDetail (UserDetailRequest) returns (UserDetailResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
  }
}

message CreateUserRequest {
  string email      = 1;
  string password   = 2;
  string first_name = 3;
  string last_name  = 4;
}

message CreateUserResponse {}

message ListUsersRequest {
  int64 offset    = 1;
  int64 limit     = 2;
}

message User {
  string user_id    = 1;
  string email      = 2;
  string first_name = 3;
  string last_name  = 4;
}

message ListUsersResponse {
  repeated User users = 1;
}

message UpdateUserRequest {
  User user = 1;
  google.protobuf.FieldMask update_mask = 6;
}

message UpdateUserResponse {}

message UserDetailRequest {
  string user_id   = 1;
}

message UserDetailResponse {
  string user_id    = 1;
  string email      = 2;
  string first_name = 3;
  string last_name  = 4;
}