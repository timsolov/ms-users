syntax = "proto3";

package users.v1;

import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "google/protobuf/struct.proto";
// import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = ".;pb";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
  schemes: HTTP
  base_path: "/ms-users"
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "X-User-Id"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-User-Id"
        description: "Header X-User-Id with user_id in value. Available only in internal network. Example: `X-User-Id: 65da4e43-81b2-42e4-9669-a5b4bb54716e`."
      }
    }
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer. Example: `Authentication: Bearer <token>`."
      }
    }
    security: {
      key: "Cookie"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Cookie"
        description: "Authentication token in cookie field access_token. Example: `Cookie: access_token=<token>`"
      }
    }
  }
  responses: {
    key: "400"
    value: {
      description: "Validation error"
      schema: { json_schema: { ref: ".google.rpc.Status" } }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal server error"
      schema: { json_schema: { ref: ".users.v1.Empty" } }
    }
  }
};

service UserService {
  // Creates new profile with email-password identity.
  //
  // Access: Public
  //
  // For creating new profile you have to provide:
  // - email (required);
  // - password (required);
  // - first_name (optional);
  // - last_name (optional);
  //
  rpc CreateEmailPassIdentity(CreateEmailPassIdentityRequest) returns (CreateEmailPassIdentityResponse) {
    option (google.api.http) = {
      post: "/v1/identities/email-pass"
      body: "*"
    };
  }

  // Authenticate users by email-pasword.
  //
  // Access: Public
  //
  rpc AuthEmailPass(AuthEmailPassRequest) returns (AuthEmailPassResponse) {
    option (google.api.http) = {
      post: "/v1/auth/email-pass"
      body: "*"
    };
  }

  // Confirm universal confirm link
  //
  // Access: Public
  //
  // It's possible to confirm different type of operations.
  //
  rpc Confirm(ConfirmRequest) returns (ConfirmResponse) {
    option (google.api.http) = {
      get: "/v1/identities/confirm/{encoded}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "401"
        value: {
          description: "Unauthorized request"
          schema: { json_schema: { ref: ".users.v1.Empty" } }
        }
      }
    };
  }

  // RetryConfirm resends confirmation code.
  //
  // Access: Public
  //
  // This end-point is utilized when confirmation code is expired and
  // user wants to reissue new confirmation code.
  //
  // For email-pass identity should be provided email and if identity with related
  // email exists confirmation will be sent to that email.
  //
  rpc RetryConfirm(RetryConfirmRequest) returns (RetryConfirmResponse) {
    option (google.api.http) = {
      post: "/v1/identities/retry-confirm"
      body: "*"
    };
  }

  // ResetPasswordInit begins reset-password process for identity.
  //
  // Access: Public
  //
  // For email-pass identity should be provided email and if identity with related
  // email exists confirmation code for recovery process will be sent to that email.
  // In email will be stored link with comfirm_id (i) and verifycation code (p) inside
  // query parameters of the link. It should leads the user to the web page where the
  // user will see input for `new password`.
  //
  // This end-point will always return 200 OK for failed and success requests. This is
  // necessary to prevent database brute-forcing.
  //
  rpc ResetPasswordInit(ResetPasswordInitRequest) returns (ResetPasswordInitResponse) {
    option (google.api.http) = {
      post: "/v1/identities/reset-password-init"
      body: "*"
    };
  }

  // ResetPasswordConfirm confirm identity recovery process and set new password.
  //
  // Access: Public
  //
  // It's necessary to identify does the user who started recovery process is owner of
  // the identity. So this end-point waits for verification id, code and new password.
  //
  // `confirm_id` should be in Base64-URL-encoded UUID.
  //
  rpc ResetPasswordConfirm(ResetPasswordConfirmRequest) returns (ResetPasswordConfirmResponse) {
    option (google.api.http) = {
      post: "/v1/identities/reset-password-confirm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "Recovery not found"
          schema: { json_schema: { ref: ".users.v1.Empty" } }
        }
      }
    };
  }

  // Profile detail info.
  //
  // Access: X-User-Id
  //
  // Profile returns profile and identities of user by user_id.
  //
  rpc Profile(ProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      get: "/v1/profile"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: { security_requirement: { key: "X-User-Id" } }
    };
  }

  // UpdateProfile updates profile traits.
  //
  // Access: X-User-Id
  //
  // Updates one or multiple profile traits in database.
  //
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      put: "/v1/profile"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: { security_requirement: { key: "X-User-Id" } }
    };
  }

  // Whoami returns user_id by access_token.
  //
  // Access: Bearer or Cookie
  //
  // This end-point considers you have an access_token in Cookie or Authorization header.
  // It's possible to use it in authentication middleware for authenticate users.
  //
  rpc Whoami(WhoamiRequest) returns (WhoamiResponse) {
    option (google.api.http) = {
      post: "/v1/whoami"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: { key: "Bearer" }
        security_requirement: { key: "Cookie" }
      }
      responses: {
        key: "401"
        value: {
          description: "Unauthorized request"
          schema: { json_schema: { ref: ".users.v1.Empty" } }
        }
      }
    };
  }
}

message Empty {}

// CreateEmailPassIdentity

message CreateEmailPassIdentityRequest {
  string                 email    = 1 [(tagger.tags) = "validate:\"required,email,min=6,max=256\""];
  string                 password = 2 [(tagger.tags) = "validate:\"required,min=8,max=50\""];
  google.protobuf.Struct profile  = 3;  // properties for profile (should be validated by jsonschema file provided in settings)
}

message CreateEmailPassIdentityResponse {
  string user_id = 1;
}

// AuthEmailPass

message AuthEmailPassRequest {
  string email    = 1 [(tagger.tags) = "validate:\"required,email,min=6,max=256\""];
  string password = 2 [(tagger.tags) = "validate:\"required,min=8,max=50\""];
}

message AuthEmailPassResponse {
  string access_token = 1;
}

// Confirm

message ConfirmRequest {
  string encoded = 1;
}

message ConfirmResponse {}

// RetryConfirm

message RetryConfirmRequest {
  string ident = 1 [(tagger.tags) = "validate:\"required,min=6,max=256\""];
}

message RetryConfirmResponse {}

// ResetPasswordInit

message ResetPasswordInitRequest {
  string ident = 1 [(tagger.tags) = "validate:\"required,min=6,max=256\""];
}

message ResetPasswordInitResponse {}

// ResetPasswordConfirm

message ResetPasswordConfirmRequest {
  string confirm_id   = 1 [(tagger.tags) = "validate:\"required,min=8,max=36\""];
  string verifycation = 2 [(tagger.tags) = "validate:\"required,min=6,max=256\""];
  string password     = 3 [(tagger.tags) = "validate:\"required,min=8,max=50\""];
}

message ResetPasswordConfirmResponse {}

// Profile

message Identity {
  enum Kind {
    UNKNOWN   = 0;
    EMAILPASS = 1;
  }
  string ident = 1;
  Kind   kind  = 2;
}

message ProfileRequest {}

message ProfileResponse {
  string                 user_id = 1;
  google.protobuf.Struct profile = 2;  // properties for profile
  repeated Identity      idents  = 3;
}

// UpdateProfile

message UpdateProfileRequest {
  string                 user_id = 1 [(tagger.tags) = "validate:\"required,uuid\""];
  google.protobuf.Struct profile = 2;  // properties for profile (should be validated by jsonschema file provided in settings)
}

message UpdateProfileResponse {
}

// Whoami

message WhoamiRequest {}
message WhoamiResponse {
  string user_id = 1;
}